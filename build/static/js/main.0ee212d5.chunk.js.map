{"version":3,"sources":["components/Info/index.js","components/Projects/index.js","components/Links/index.js","App.js","serviceWorker.js","index.js"],"names":["Info","ian","this","props","className","name","title","bio","Component","Projects","class","projects","map","project","summary","tech","href","siteUrl","codeUrl","disabled","Links","state","mode","availableModes","handleClick","e","node","contains","target","setState","links","link","rel","url","alt","src","json","JSON","stringify","value","text","displayText","replace","length","slice","document","addEventListener","removeEventListener","ref","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","ianWalston","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0ee212d5.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport './style.css'\n\nexport class Info extends Component {\n    render() {\n        const ian = this.props.ian\n        return (\n            <div>\n                <h1 className='display-4'>{ian.name}</h1>\n                <h2>{ian.title}</h2>\n                <p className='lead'>{ian.bio}</p>\n            </div>\n        )\n    }\n}\n\nexport default Info\n","import React, { Component } from \"react\";\nimport \"./style.css\";\n\nexport class Projects extends Component {\n    render() {\n        return (\n            <div>\n                <h2>Projects</h2>\n                <div class=\"card-deck\">\n                    {this.props.projects.map(project => {\n                        return (\n                            <div className=\"card\">\n                                <div className=\"card-body\">\n                                    <h5 className=\"card-title\">\n                                        {project.summary}\n                                    </h5>\n                                    <p className=\"card-text\">{project.tech}</p>\n                                </div>\n                                <div className=\"card-footer\">\n                                    <a href={project.siteUrl}>\n                                        <button className=\"btn btn-primary\">\n                                            site\n                                        </button>\n                                    </a>\n                                    <a\n                                        className=\"float-right d-block \"\n                                        href={project.codeUrl}\n                                    >\n                                        <button\n                                            className=\"btn btn-success\"\n                                            disabled={!project.codeUrl}\n                                        >\n                                            code\n                                        </button>\n                                    </a>\n                                </div>\n                            </div>\n                        );\n                    })}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Projects;\n","import React, { Component } from \"react\";   \nimport ReactTooltip from 'react-tooltip'\nimport \"./style.css\";\n\nexport class Links extends Component {\n    state = { mode: \"html\" };\n\n    availableModes = [\"html\", \"icons\", \"json\", \"plaintext\"];\n\n    iconsMode() {\n        return <div className={'iconLinks'}>{this.props.links.map(link => {\n            return <a target='_blank' rel=\"noopener noreferrer\" href={link.url}><img className='icon' alt={link.name} src={`build/svg/${link.name}.svg`}/></a>\n                \n        })}</div>\n    }\n\n    jsonMode() {\n        const json = JSON.stringify(this.props.links, null, 4);\n\n        return <textarea className='json'value={json} />;\n    }\n\n    plaintextMode(){\n        let text = ''\n\n        this.props.links.map(link=>{\n            return text+=`${link.name}: ${link.displayText?link.displayText:link.url}\\n\\n`\n        })\n\n        return <textarea value={text}/>\n    }\n\n    htmlMode() {\n        return <div className='regalurLinks'>{\n        this.props.links.map(link => {\n            let displayText = ''\n\n            if (link.displayText) {\n                displayText = link.displayText\n            } else {\n                displayText = link.url.replace(/^https:\\/\\//, \"\");                \n                if (displayText.length >= 40) {\n                    displayText = displayText.slice(0, 38) + \"...\";\n                }\n            }\n\n            return (\n                <div>\n                    <span>{link.name}: </span>\n                    <a target='_blank' rel=\"noopener noreferrer\" href={link.url}>{displayText}</a>\n                </div>\n            );\n        })\n    }</div>\n    }\n\n    componentWillMount(){\n        document.addEventListener('mousedown', this.handleClick, false)\n    }\n    componentWillUnmount(){\n        document.removeEventListener('mousedown', this.handleClick, false)\n    }\n    handleClick = (e) =>{\n        if (this.node.contains(e.target)){\n            return; \n        }\n\n        this.setState({mode: 'html'})\n    }\n\n    render() {\n        return (\n            <div className=\"Links\" ref={node => this.node = node}>\n                <h2 className='text-center'>Links</h2>\n                <div className=\"buttons\">\n                    {this.availableModes.map(mode => {\n                        return (\n                            <button \n                                onClick={() => this.setState({ mode })}\n                                className={(this.state.mode === mode ? 'active' : null) + ' btn btn-info'}\n                            >\n                                {mode}\n                            </button>\n                        );\n                    })}\n                </div>\n                {this[this.state.mode + \"Mode\"]()}\n                <ReactTooltip />\n            </div>\n        );\n    }\n}\n\nexport default Links;\n","import React, { Component } from \"react\";\nimport Info from \"./components/Info\";\nimport Projects from \"./components/Projects/index\";\nimport Links from \"./components/Links\";\nimport ExportButton from \"./components/ExportButton\";\n\nexport class App extends Component {\n    render() {\n        const ian = this.props.ian;\n        return (\n            <div className=\"container mt-4 pt-4\">\n                <div className=\"row\">\n                    <div className='col-md-8'>\n                        <Info {...this.props} />\n                    </div>\n                    <div className='col-md-4'>\n                        <Links links={ian.links} />\n                    </div>\n                </div>\n                <hr className='my-4'/>\n                <div className=\"row\">\n                    <Projects projects={ian.projects} />\n                    {/* <ExportButton {...this.props} /> */}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.1/8 is considered localhost for IPv4.\n      window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n      )\n  );\n  \n  export function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n      // The URL constructor is available in all browsers that support SW.\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n      if (publicUrl.origin !== window.location.origin) {\n        // Our service worker won't work if PUBLIC_URL is on a different origin\n        // from what our page is served on. This might happen if a CDN is used to\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n        return;\n      }\n  \n      window.addEventListener('load', () => {\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n  \n        if (isLocalhost) {\n          // This is running on localhost. Let's check if a service worker still exists or not.\n          checkValidServiceWorker(swUrl, config);\n  \n          // Add some additional logging to localhost, pointing developers to the\n          // service worker/PWA documentation.\n          navigator.serviceWorker.ready.then(() => {\n            console.log(\n              'This web app is being served cache-first by a service ' +\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\n            );\n          });\n        } else {\n          // Is not localhost. Just register service worker\n          registerValidSW(swUrl, config);\n        }\n      });\n    }\n  }\n  \n  function registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the updated precached content has been fetched,\n                // but the previous service worker will still serve the older\n                // content until all client tabs are closed.\n                console.log(\n                  'New content is available and will be used when all ' +\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                );\n  \n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n  \n                // Execute callback\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch(error => {\n        console.error('Error during service worker registration:', error);\n      });\n  }\n  \n  function checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n      .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get('content-type');\n        if (\n          response.status === 404 ||\n          (contentType != null && contentType.indexOf('javascript') === -1)\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log(\n          'No internet connection found. App is running in offline mode.'\n        );\n      });\n  }\n  \n  export function unregister() {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready.then(registration => {\n        registration.unregister();\n      });\n    }\n  }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport ianWalston from \"./info.json\";\n\nReactDOM.render(<App ian={ianWalston} />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}